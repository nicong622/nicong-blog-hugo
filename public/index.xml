<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicong&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Nicong&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 06 Jul 2022 14:57:34 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【How Vue Diff】之简单 Diff</title>
      <link>/posts/how_vue_diff_simple_diff/</link>
      <pubDate>Wed, 06 Jul 2022 14:57:34 +0800</pubDate>
      
      <guid>/posts/how_vue_diff_simple_diff/</guid>
      <description>简单分析一下 Vuejs 中的“简单 Diff”算法，参考代码，主要关注 patchChildren() 函数的实现过程。
首先假设新旧 vnode 的子节点都是一组节点。因为如果其中一个 vnode 的子节点不是数组的话，Diff 的意义就不大了。
算法的整体流程 Diff 算法的主要目标是通过新旧两组节点的对比，找到可以复用的节点，然后移动节点到新的位置。所以，算法整体的流程总结一下就是：
找到可以复用的元素（即分别在新旧 children 中 key 相同的两个元素）； 对这两个节点进行 patch 操作； 移动元素到合适的位置； 处理新增或者不存在的元素； 找到可复用的元素 通过参考代码可以看到，算法的主要逻辑就是循环里嵌套循环：遍历新的子节点数组 newChildren，对于里面的每一个子节点 newVNode，都尝试在 oldChildren 中找到一个 oldVNode，使得 newVNode.key === oldVNode.key 即元素可复用。然后做一下更新，即 patch() 。
主体代码如下：
// 遍历新的 children for (let i = 0; i &amp;lt; newChildren.length; i++) { const newVNode = newChildren[i] let j = 0 // 遍历旧的 children for (j; j &amp;lt; oldChildren.length; j++) { const oldVNode = oldChildren[j] // 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之 if (newVNode.</description>
    </item>
    
    <item>
      <title>如何选择用 Map 还是 Object</title>
      <link>/posts/map_or_object/</link>
      <pubDate>Wed, 29 Jun 2022 15:26:39 +0800</pubDate>
      
      <guid>/posts/map_or_object/</guid>
      <description>在很多场景里，我们似乎都可以用 Map 来代替 Object 来完成同样的功能，那么这两者到底要如何选择呢？这篇文章做了详细的描述和对比。
结论是：
如果在开发阶段就有固定且属性个数有限，可以使用 Object ，例如配置列表； 相反，如果 keys 的数量和类型不能提前知道，并且需要频繁更新的，就应该使用 Map ，例如 event emitter； 在插入、删除、遍历的时候，Map 的性能都比 Object 好，除非 keys 是比较小的整数。 </description>
    </item>
    
    <item>
      <title>Object.hasOwn vs Object.hasOwnProperty</title>
      <link>/posts/hasown_vs_hasownproperty/</link>
      <pubDate>Tue, 28 Jun 2022 15:00:11 +0800</pubDate>
      
      <guid>/posts/hasown_vs_hasownproperty/</guid>
      <description>Object.hasOwn() 是 ES2022 中的新特性，他它是一个静态方法，作用是提供一种安全的方法来检查某个对象是否自主拥有（不是继承而来的）某个属性。看起来作用跟 Object.hasOwnProperty() 一样，那为什么还要提出 Object.hasOwn() 呢？
原因有以下几个：
由于 Object.hasOwnProperty() 方法是从对象的原型 Object.prototype 上继承而来的，如果用户在对象上定义了一个同名的方法，就会出现意料之外的结果，即所谓的“原型污染”。 对于用 Object.create(null) 创建出来的对象，由于对象的原型就是 null ，所以对象本身没有 hasOwnProperty() 方法。虽然可以用 Object.prototype.hasOwnProperty.call() ，但是这样看起来就比较笨重了，并且 Eslint 的内置规则是禁止直接使用 Object.prototype 上的方法的。 Object.hasOwn() 就是为了解决上面的问题而提出的，所以应该用这个方法来代替 Object.hasOwnProperty()。
注意：不过需要注意的是，你依然可以重新定义 Object.hasOwn() 方法。</description>
    </item>
    
    <item>
      <title>移除项目中的 @ant-design/compatible 依赖</title>
      <link>/posts/remove-antd-compatible/</link>
      <pubDate>Tue, 21 Jun 2022 07:33:46 +0000</pubDate>
      
      <guid>/posts/remove-antd-compatible/</guid>
      <description>Ant Design 第4版发布之后不久，我就按照 antd 官方的指引利用迁移工具帮项目做了升级。由于迁移工具实际上是通过引入 @ant-design/compatible 来使那些不兼容的组件能继续运行，所以这样升级完之后实际上项目里就会同时存在 v3 和 v4 两个版本的 antd，不仅代码体积有冗余，还会有两套 Form 组件的写法，不利用后期维护。于是最近花时间移除了对 @ant-design/compatible 的依赖，实现了“完全”的升级。
这篇文章主要讲述我如何使用 AST 转换工具来帮助我完成升级。
修改范围与整体思路 需要做的迁移工作可以参考 antd 官方的说明。
对于我的项目，由于使用到 @ant-design/compatible 的基本上只有 v3 版本的 Form 组件， 所以要修改的范围主要有这些：
移除 Form.create({})(Component) 写法； 把 getFieldDecorator 的写法改成用 &amp;lt;Form.Item&amp;gt;； 移除 @ant-design/compatible 相关的 import 语句； 修改表单实体方法的调用方式。 第 1 点基本上可以通过编辑器的字符串替换功能加上正则表达式完成。
第 2、3 点可以我用一个 AST 转换工具来辅助修改。这是本文的重点，后面会展开说。
第 4 点理论上也可以用刚刚提到的工具来修改，但是项目里调用的方法不统一，例如有 this.props.form.setFieldsValue 也有 const { setFieldsValue } from this.props.form 等等，工具里需要的判断比较多。而且项目里使用到的实体方法不算很多，修改起来工作量比 getFieldDecorator 少很多。所以我打算手动修改，刚好可以边自测边修改。
确认范围之后就可以开干了。
代码修改工具 下面主要说说上面提到的 “代码修改工具”。</description>
    </item>
    
    <item>
      <title>一个基于 Systemjs 的组件动态加载方案</title>
      <link>/posts/loading_compoents_dynamically_by_systemjs/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/loading_compoents_dynamically_by_systemjs/</guid>
      <description>背景 在低代码平台的设计中，通常需要动态地加载一个组件。
Bigo 的活动配置平台 raptor 使用 requirejs 来实现动态加载。requirejs 要求加载的是 AMD 格式的包。但是很多优秀的第三方组件都没有打包成 AMD 格式，而是只有Commonjs 和 ESM 版本，这就意味着不能直接在平台里使用这些组件。
为了解决上述问题，可以使用 systemjs。利用 systemjs ，可以通过动态加载的方式加载一个远程的 ESM 模块，并且运行在不支持 ESM 格式的浏览器中。
Systemjs systemjs 实现了一个叫做 System.register 的模块格式，用于在浏览器中实现动态 import()、import.meta (包括 import.meta.url and import.meta.resolve) 等功能。更多的功能请参考 systemjs 的文档。
例如以下例子：
使用 使用的时候，需要提前添加以下 script 标签：
&amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/systemjs/dist/system.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;systemjs-importmap&amp;#34;&amp;gt; // 定义 importmap { &amp;#34;imports&amp;#34;: { &amp;#34;lodash&amp;#34;: &amp;#34;https://unpkg.com/lodash@4.17.10/lodash.js&amp;#34; // 或者其他需要动态加载的模块 } } &amp;lt;/script&amp;gt; 接着，就可以使用以下两种方法来加载并使用一个在上面的 importmap 中配置过的模块。
window.System.import // window.System.import 返回的是一个 Promise 对象 window.System.import(&amp;#39;lodash&amp;#39;) .then(lodash =&amp;gt; lodash.</description>
    </item>
    
    <item>
      <title>在 web 环境中获取 uuid 的简单方法</title>
      <link>/posts/web-create-uuid/</link>
      <pubDate>Wed, 15 Dec 2021 10:10:51 +0800</pubDate>
      
      <guid>/posts/web-create-uuid/</guid>
      <description>偶然在掘金看到了一个在 web 环境中生成 uuid 的方法，只需要一行代码。来自这篇文章的评论区。
URL.createObjectURL(new Blob()).substr(-36); 解析 下面稍微解析一下这行代码。
URL.createObjectURL() 接收一个类型是 File, Blob, 或者 MediaSource 的对象作为参数，然后返回一个 DOMString。这个 DOMString 指向作为参数传入的对象。然后就可以通过这个 DOMString 访问到对应的对象。
即使传入的是同一个对象，每次调用 URL.createObjectURL() 都会返回一个新的 DOMString 。留意返回的 DOMString，会发现最后的 36 个字符是一串唯一的字符串，用来区分每个 DOMString 。例如：
&amp;#39;blob:https://www.google.com/82482eae-c186-4246-b02b-40d43d9f4d90&amp;#39; 所以截取最后的 36 个字符后就能获得一个 uuid。对于一般的 web 应用来说，这个方法比引入一个 UUID 或 NanoId 库更简单。
另外，在 MDN 的文档里也提到了，虽然浏览器会在页面 unloaded 的时候自动释放由 URL.createObjectURL() 创建的 object URL，但如果你对性能和内存使用有要求的话，最好还是手动调用一下 URL.revokeObjectURL() 来释放 object URL。
参考 createObjectURL DOMString </description>
    </item>
    
    <item>
      <title>获取一行中子元素的个数</title>
      <link>/posts/children_count_in_one_row/</link>
      <pubDate>Mon, 25 Oct 2021 19:15:32 +0800</pubDate>
      
      <guid>/posts/children_count_in_one_row/</guid>
      <description>有这样一个场景：一个父元素中有若干个行内子元素，子元素数量比较多，需要换行展示。例如下图。此时我想知道每一行里有多少个子元素，要怎么做？
如果每个子元素的宽度都是固定，那就直接用父元素的宽度除以子元素的宽度就可以。但如果每个子元素的宽度不固定呢？
对于子元素宽度不固定的情况，关键是要找到从哪个元素开始换行。以下是两种思路：
遍历每个子元素，并且对每个子元素的宽度做累加，如果累加的宽度超过了父元素的宽度，就表示需要换行； 还是遍历子元素，然后获取每个子元素距离父元素左边或者屏幕左边的距离，假设是 X，如果子元素是在同一行，X 就会逐渐增加。如果在遍历的过程中出现了一个元素，它的 X 与第 0 个元素的 X 一样，或者简单点，比上一个元素的 X 小，就表示发生了换行。 </description>
    </item>
    
    <item>
      <title>入坑客制化键盘的一些建议</title>
      <link>/posts/custom_keyboard_attention/</link>
      <pubDate>Sat, 16 Oct 2021 11:48:50 +0800</pubDate>
      
      <guid>/posts/custom_keyboard_attention/</guid>
      <description>进入客制化键盘圈子有一段时间了，我发现这个圈子虽然相对小众，但是不乏优秀的作品。不过跟其他圈子一样，新入门的时候很容易走弯路，花钱买了自己不喜欢或者不合适的东西，最后只能搁置或者亏钱转卖。于是我总结了一下这段时间里自己的体会，希望能帮助客制化键盘的新手们少走一些弯路，多省点钱。
在哪里获取新动态 首先说说在哪里能了解到最新的客制化键盘相关的资讯。
装备前线 我最常去的是 zFrontier 装备前线 的「机械键盘」板块。这里是我知道的国内最活跃的客制化键盘论坛了。里面还有 pc 装机、摄影、模型等等的其他板块，但我基本只看键盘相关的。
里面除了会有键圈的朋友们晒自己的装备，还会有键盘相关产品的作者发布最新的产品消息等等。通过某些贴子里网友们的讨论，还能学到很多客制化键盘相关的知识。有空逛一逛，就能在短时间内了解到很多键圈最新的动态。
各种聊天群 如果想要在第一时间了解到最新的产品消息，应该就要加入各种聊天群了，通常是 QQ 群。群号能在装备前线的一些贴子里找到，如果是新产品的贴子，一般能在贴子顶部找到；有时候还能在底下的评论里找到。
这些群通常是某个新产品的作者建立的，用来沟通新产品的各种细节，包括前期的设计、购买渠道/时间、发货时间、售后情况等等。很多时候还会发布下一个新产品的信息。
B站 在 BiliBili 除了有键盘的评测，还会有一些键圈信息的汇总。比较知名的有键盘侠赤瞳妖，KeyboardDaily，Ayb爱莹宝 等等。
购买方式 团购 新发布的套件、键帽等通常是限量团购的形式，比较少有现货。
团购多数是先款团购，也就是先付款（全款和定金都有）再生产，然后再发货，而且生产时间通常都比较久，有些人可能收到货的时候才想起来自己曾经下单买过。如果是套件的话一般都要两三个月。键帽可能会快一点，一个月左右，但也有例外，说的就是 GMK。现在（2021年10月）下单，都要等到 2023 年第一季度才能发货，中间还有可能会因为客观因素而导致延期或流产。除了客观因素，还可能在等待期间你就喜欢上了别的套件/键帽甚至退坑了。但多数时候上了团购的车就不能退款了，只能自己想办法转单，装备前线里就有很多键帽转单的。
其实这个过程跟「期货」有点像，都是花钱买未来的产品。
你可能会觉得这种形式有点坑，中间的变数太多。但实际上很多套件/键帽的作者都是个人或者小团队，没有自己的生产设备，只能找代工厂。而工厂都是要先付一部分钱才能生产，但小团队通常也没有这么多的资金，所以只能先款团购，这也无可厚非。如果你实在不放心，可以看看以下其他的购买方式。
现货 有些产品如果在前期的设计阶段（或者叫 IC，Interest Check）已经有比较好的反响，有购买意愿的人数比较多，就会在团购订单之外额外多生产一些，用作现货售卖。当然数量不会很多而且价钱会比团购贵一点。好处就是不用等太久，而且能看看前期团购用户的真是反馈再决定买不买。
还有一些一开始是限量团购，发货后发现用户反馈比较热烈，就会再生产一批现货出售。像我之前买的一套 2021 流行色键帽就是团购结束后再放出现货，团购的时候我还没入坑客制化，所以是在现货阶段买的。
在哪里买 对于新出的产品，如果你能了解到有这款产品，一般也就能知道在哪里买。因为发布新产品的贴子里通常都会有注明购买渠道，这些渠道一般包括作者自己的网站或小程序、淘宝店、还有第三方的代理商，例如装备前线、KBDFans、米可维外设等等，还会有一些国外的网站。
如果是已经截团的产品，可以先到闲鱼找找，除了二手有时候还能找到全新未拆封的。因为有些人专门做这种倒卖，或者单纯只是因为收到货后就不想要了。
不过要注意在闲鱼里很多时候都会有一定程度的溢价，不要看到喜欢的就直接买。最好先尽可能找找这个套件/键帽相关的资料，包括开团价、配置里具体有哪些东西、各类评测，再看看网友们的晒图，看看自己是不是真的喜欢，溢价是否合理或者自己能否承受得了。除非你不在乎钱，否则我还是建议你先考虑清楚再买。
套件 配列 如果要买套件，我首先会考虑的是配列。关于配列，可以参考一下这里客制化键盘配列 - by ^elvis^ - 来自 zFrontier.com。
在考虑配列的时候，我一般会从实用性和占用空间两方面考虑。
对于大尺寸的配列，虽然功能区和数字键都有，但你可能极少会用到。没必要为了这些不经常用到的功能而占用过多的桌面空间，除非你就是喜欢它的外观。还有一点就是多了一个数字键盘，就会使得字母区和鼠标之间的距离变长，继而导致右手在字母区与鼠标之间切换的距离变长，导致右手更容易累。当然更极致一点的就是完全用键盘组合键来代替鼠标操作。还有一些奇怪的配列会把字母区或者 F 区放在键盘左侧。
对于小尺寸配列，要小心不要被它小巧精致的外观而迷惑。首先要考虑一下有哪些功能键是你比较依赖的，如果配列里没有，你是否能接受通过组合键来触发。其次还要考虑一下键盘尺寸变小之后带来的输入习惯的变化。比较明显的就是方向键的位置变化，有可能变成与其他按钮放在一起而导致容易误触，以及左移 64 配列里右 shift 键变小的问题。
我之前也曾经有过一把左移 64 的 prism60，类似于下图，这是来自“装备前线 键盘葫芦forkrere60 by elvis”的照片。
虽然它能基本满足我日常工作需求，但是右 shift 键只有 1U 宽度，并且与方向键挨在一起，导致很容易误触，很不爽。所以最后我还是放弃了它。</description>
    </item>
    
    <item>
      <title>关于客制化键盘</title>
      <link>/posts/custom_keyboard_review/</link>
      <pubDate>Tue, 28 Sep 2021 11:48:50 +0800</pubDate>
      
      <guid>/posts/custom_keyboard_review/</guid>
      <description>前段时间因为一个偶然的机会入坑了客制化键盘。在坑里摸爬了一段时间之后，逐渐有了一些自己的想法。回想一下感觉整个过程就像是谈恋爱一样，从相识进入热恋，然后逐渐趋于冷静平淡最后或相伴一生或形同陌路。
缘由 2021年中旬，我女朋友换了新工作，没做多久就跟我抱怨新公司配的手提电脑键盘不好用，敲起来像钢板一样，而且按键小，反正就是不爽。然后就故意问我：“你要不要换新键盘啊~”。其实就是想从我这里白嫖一把键盘，然后让我自己再买一把新的。
我当时手上有两把机械键盘：
一把在公司用，是大概 6 年前买的酷冷至尊烈焰枪，侧刻，cherry 红轴。这把键盘一直用到现在，除了键帽和外壳有明显的使用痕迹之外，没有其他问题，6 年来一直是我的主力键盘，帮助我写了很多 bug 🐞。也是它让我认识到了“机械键盘”这种东西；
另外一把是杜伽K320，也是cherry 红轴，前两年买的。主要是为了在家里做外包。
对于这两把键盘，其实我没有更偏爱哪个，所以我当时让我女朋友自己随便选一个。最后是决定把酷冷至尊给她。
至于新的键盘，我买了 Keychron 的 K2。一来是因为那段时间 Keychron 貌似挺火的，二来是想换个小一点的键盘，免得右手在键盘字母区和鼠标之间切换的时候距离太长。买的时候我还特意选了有热插拔功能的，当时的想法仅仅是可以换个青轴试试所谓的段落手感。而就是这个“热插拔”把我带入了客制化的大坑。
初识客制化 Keychron 用的是佳达隆的轴体，当时还不知道佳达隆，就上网搜了一下佳达隆和它生产的轴体。其中一条搜索结果把我带到了zFrontier 装备前线这个网站（简称 zf），结果我就打开了客制化键盘的大门。
之前虽然也有偶尔在其他地方看到过“客制化键盘”这个名词，但一直没引起我太多注意，以为只是一些造型比较奇特或者键帽比较好看的键盘而已（事实上有些键帽还真是挺好看的）。
在 zf ，我第一次发现原来有这么多好看的键帽。有朴素简单的黑白，也有精心设计的字体和图案，目不暇接，一下子就把我吸引住了。那种感觉就像一个小孩子走进了一个玩具店，被琳琅满目、各式各样的玩具包围了一样。每一件玩具都想靠近仔细地观摩，摸摸它的棱角、看看它的颜色、再找找一些精致的设计，似乎想把每一个细节都刻在心里，然后在晚上睡觉前在脑海里像电影一样一帧一帧地回放。离开的时候还意犹未尽，打算第二天放学的时候再来看看其他未发现的玩具。这是一种简单的快乐。
对于当时的我来说，客制化键盘又何尝不是这样一件仅仅是看到图片就让我忘乎所以、不愿离开的玩具呢。以致于每天只要我一有时间就会想去看看网友们的晒图，看看其他人写的客制化键盘的入门指南，还在 B 站搜索客制化键盘相关的视频。渐渐地发现，客制化键盘不仅是好看的键帽，还有其他好玩的地方，例如不同结构的套件、不同材质的定位板、再配合上不同的轴体，就能碰撞出不同的敲击手感和声音。
买买买&amp;amp;卖卖卖 天天去看，难免就会有剁手的想法。所以很自然地就进入了买买买的阶段。
我剁手的第一件东西是一套键帽，MG 的微光。我拍照技术不行，所以这里放几张在 zf 看到的照片，侵删。
由于我入坑的时候这套键帽的团购已经截止了，所以只能在闲鱼上找，并且都比团购价贵一截。我当时就收藏了几件商品，价钱都是 700+ 。其他人可能会觉得花 700+ 的价钱买一套键帽（注意是只有键帽）肯定是人傻钱多，连我自己都觉得有点不理智。但人们常说“恋爱使人盲目”，热恋期的人更是容易头脑发热。于是在犹豫了几天之后，终于还是狠下心来买了一套。
收到快递之后就迫不及待第拆开了快递，并第一时间把 K2 的原装键帽换成了这套微光键帽。实物的效果确实挺好看（当时忘记拍照了）。可是在使用了一天后就发现有点不对劲，觉得手指很累。以前敲一整天代码都没这种感觉，但是换了新键帽才半天就感觉累。这时候就想到是不是跟键帽的高度有关。
这套微光是 MG 高度的球帽设计，一般的球帽都会比原厂高度的键帽高，（关于键帽的高度这里就不展开说了），而且 MG 高度貌似比常见的 SA 高度还要高一丢丢。高键帽带来的一个缺点就是初次使用的话会觉得比较累，对于用惯原厂高度的人来说感觉更加明显。
虽然外观很好看，但键盘还是每天都要重度使用的工具，还是舒适比较重要，所以我又换成原装的键帽了（K2原装的键帽是 OEM 高度的）。然后这套键帽的下场就是被放在了一边，最后在闲鱼等到了另一个有缘人。
第二个剁手的东西是套件。准确地来说是好几样东西。
首先我在 zf 的某个贴子中看到了一个外壳，prism60。它的主要亮点是 4 个角的设计，不是普通的直角，而是一个多面体。配合电泳白的配色，有一种冷峻、硬朗的感觉。而且后面拿到手的时候发现还挺重的，挺有质感。
（已下图片来自 zf，侵删）
在我发现这个外壳的时候已经结束团购了，但是 zf 上还有现货。于是我就下单了。另外还在淘宝上买了一套 gk64xs 的 pcb 套件。买 pcb 的时候还有个小插曲。本来 zf 的客服给我推荐了一个配套的 pcb，但只支持 61 键的配列，不支持左移 64。但我平常对方向键比较依赖，不想通过组合键来实现方向键的切换。所以只能去淘宝上买支持左移 64 的 pcb。关于左移 64 的概念大家可以上网搜一下，这里不展开说明。</description>
    </item>
    
    <item>
      <title>nuxt-link预加载的原理</title>
      <link>/posts/how-do-nuxt-link-preload/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-do-nuxt-link-preload/</guid>
      <description>nuxt-link 是 nuxtjs 提供的一个组件，基于 vue-router 的 router-link 做了一层封装，实现了预加载的功能。本文来简单聊聊这个“预加载”的原理。
一点准备工作 如果直接打开 nuxt 项目中 nuxt-link的源码，会发现里面使用了很多类似于 &amp;lt;%...%&amp;gt; 这样的模板语法。这其实是 lodash.template 提供的模板语法。如果觉得影响阅读，可以按照 nuxt 的文档，新建一个 nuxt 应用，然后构建一次，再找到 .nuxt/components/nuxt-link.client.js，这个就是编译过后的 nuxt-link 代码。
前置条件 要想触发 nuxt-link 的预加载，需要同时满足以下几个条件：
nuxt-link 的 prefetch 属性值是 true 。
默认值是 nuxt 配置里的 router.prefetchLinks。prefetchLinks 的默认值是 true ，所以 prefetch 的默认值也是 true。
nuxt-link 的 noPrefetch 属性值是 false。默认值是 false。
当 nuxt-link 组件出现在可见区域内。
nuxt-link 的 to 属性指向的页面是同一个应用的页面。
有网络链接并且不是 2g 网络。
1、2 两点控制是否启动预加载功能（默认是开启预加载），3、4、5是决定什么时候执行预加载的逻辑。
原理 接下来梳理一下预加载的大致流程。为了说明原理，nuxt-link 源码里有些条件分支会省略，但不影响理解。下面会以 /cart 这个链接作为 nuxt-link 的跳转地址来做说明。/cart 页面对应的文件路径是 /pages/cart/index.</description>
    </item>
    
  </channel>
</rss>
