<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>js on Nicong的生活学习笔记</title>
    <link>/tags/js/</link>
    <description>Recent content in js on Nicong的生活学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 24 Nov 2023 11:30:50 +0800</lastBuildDate>
    <atom:link href="/tags/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Fabric.js实现一个可以在图片上创建多个点击热区的组件</title>
      <link>/posts/fabric-use-case/</link>
      <pubDate>Fri, 24 Nov 2023 11:30:50 +0800</pubDate>
      <guid>/posts/fabric-use-case/</guid>
      <description>需求描述 前段时间接到一个需求，需要在管理后台的页面装修模块里增加一个组件。组件的主体就是一张图片，通过在图片中任意位置拖动鼠标可以创建一个矩形选区，该选区就是一个可点击的区域，所以还需要配置点击该区域后的页面跳转路径。可以创建多个选区，但选区不能重叠，也不能超出图片的边界。这个组件在用户端渲染出来后，用户可以通过点击该组件的不同区域跳转到对应的页面。
需求分析 实现这个组件的思路比较简单。先创建一个 canvas，同时用自定义的图片填充这个 canvas，然后创建选区。创建完选区后需要保存到服务端的主要数据包括图片的链接、每个选区的尺寸、选区左上角的坐标、选区的跳转链接。之后在用户端再根据这些数据在图片上创建透明的点击区域即可。
这里的重点在于如何通过拖动鼠标的方式创建可点击区域。
其实这个交互在一般的画板应用中都会看到，就是创建矩形的功能。原理也比较简单，就是监听鼠标事件。在 mouse:down 的时候记录下当前鼠标位置的坐标，然后在 mouse:up 的时候再获取一次当前坐标。有了这两组坐标就可以创建一个矩形了。当然，为了用户体验，一般还需要通过监听 mousemove 事件在拖动鼠标的时候实时渲染一个过渡状态的选区，让用户感知到当前选区的实际位置与大小。
市面上有不少库实现了类似功能，我选用了 Fabric.js。
最终结果 需求实现 创建 canvas 既然是要在图片上创建点击区域，自然就要先创建一个与图片宽高“一样”的 canvas。但是由于运营实际上传的图片尺寸可能非常大，不可能在创建选区的时候直接按图片原尺寸创建 canvas，所以需要给定一个最大宽度，然后按图片的宽高比例进行缩放得到实际的 canvas 宽高。
一种实现方案是在页面里创建一个看不见的 img 元素并设置它的最大宽度和高度，加载完成后就可以通过查询这个 img 元素的宽高从而得到图片缩放后的实际宽高。也可以监听 img 元素的 load 事件，获取图片原始宽高然后根据设定的最大宽高计算得到缩放后的实际宽高。
const BORDER_WIDTH = 3; const bgImg = new fabric.Image(document.getElementById(&amp;#34;bgImg&amp;#34;)); bgImg.scale(this.canvasWidth / this.imgWidth); const canvas = new fabric.Canvas(&amp;#34;canvas&amp;#34;, { backgroundImage: bgImg, selectionColor: &amp;#34;rgba(255, 255, 255, 0)&amp;#34;, // 鼠标框选区域背景颜色 selectionLineWidth: BORDER_WIDTH, // 鼠标框选区域边框宽度 selectionBorderColor: ACTIVE_COLOR, // 鼠标框选区域边框颜色 }); 创建选区 创建选区主要是监听 canvas 对象上的 mouse:down 和 mouse:up 事件。</description>
    </item>
    <item>
      <title>如何选择用 Map 还是 Object</title>
      <link>/posts/map_or_object/</link>
      <pubDate>Wed, 29 Jun 2022 15:26:39 +0800</pubDate>
      <guid>/posts/map_or_object/</guid>
      <description>在很多场景里，我们似乎都可以用 Map 来代替 Object 来完成同样的功能，那么这两者到底要如何选择呢？这篇文章做了详细的描述和对比。
结论是：
如果在开发阶段就有固定且属性个数有限，可以使用 Object ，例如配置列表； 相反，如果 keys 的数量和类型不能提前知道，并且需要频繁更新的，就应该使用 Map ，例如 event emitter； 在插入、删除、遍历的时候，Map 的性能都比 Object 好，除非 keys 是比较小的整数。 </description>
    </item>
    <item>
      <title>Object.hasOwn vs Object.hasOwnProperty</title>
      <link>/posts/hasown_vs_hasownproperty/</link>
      <pubDate>Tue, 28 Jun 2022 15:00:11 +0800</pubDate>
      <guid>/posts/hasown_vs_hasownproperty/</guid>
      <description>Object.hasOwn() 是 ES2022 中的新特性，他它是一个静态方法，作用是提供一种安全的方法来检查某个对象是否自主拥有（不是继承而来的）某个属性。看起来作用跟 Object.hasOwnProperty() 一样，那为什么还要提出 Object.hasOwn() 呢？
原因有以下几个：
由于 Object.hasOwnProperty() 方法是从对象的原型 Object.prototype 上继承而来的，如果用户在对象上定义了一个同名的方法，就会出现意料之外的结果，即所谓的“原型污染”。 对于用 Object.create(null) 创建出来的对象，由于对象的原型就是 null ，所以对象本身没有 hasOwnProperty() 方法。虽然可以用 Object.prototype.hasOwnProperty.call() ，但是这样看起来就比较笨重了，并且 Eslint 的内置规则是禁止直接使用 Object.prototype 上的方法的。 Object.hasOwn() 就是为了解决上面的问题而提出的，所以应该用这个方法来代替 Object.hasOwnProperty()。
注意：不过需要注意的是，你依然可以重新定义 Object.hasOwn() 方法。</description>
    </item>
    <item>
      <title>获取一行中子元素的个数</title>
      <link>/posts/children_count_in_one_row/</link>
      <pubDate>Mon, 25 Oct 2021 19:15:32 +0800</pubDate>
      <guid>/posts/children_count_in_one_row/</guid>
      <description>有这样一个场景：一个父元素中有若干个行内子元素，子元素数量比较多，需要换行展示。例如下图。此时我想知道每一行里有多少个子元素，要怎么做？
如果每个子元素的宽度都是固定，那就直接用父元素的宽度除以子元素的宽度就可以。但如果每个子元素的宽度不固定呢？
对于子元素宽度不固定的情况，关键是要找到从哪个元素开始换行。以下是两种思路：
遍历每个子元素，并且对每个子元素的宽度做累加，如果累加的宽度超过了父元素的宽度，就表示需要换行； 还是遍历子元素，然后获取每个子元素距离父元素左边或者屏幕左边的距离，假设是 X，如果子元素是在同一行，X 就会逐渐增加。如果在遍历的过程中出现了一个元素，它的 X 与第 0 个元素的 X 一样，或者简单点，比上一个元素的 X 小，就表示发生了换行。 </description>
    </item>
  </channel>
</rss>
