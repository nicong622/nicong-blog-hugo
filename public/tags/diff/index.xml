<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>diff on Nicong的生活学习笔记</title>
    <link>/tags/diff/</link>
    <description>Recent content in diff on Nicong的生活学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 06 Jul 2022 14:57:34 +0800</lastBuildDate>
    <atom:link href="/tags/diff/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【How Vue Diff】之简单 Diff 算法</title>
      <link>/posts/how_vue_diff_simple_diff/</link>
      <pubDate>Wed, 06 Jul 2022 14:57:34 +0800</pubDate>
      <guid>/posts/how_vue_diff_simple_diff/</guid>
      <description>简单分析一下 Vuejs 中的“简单 Diff”算法，参考代码，主要关注 patchChildren() 函数的实现过程。
首先假设新旧 vnode 的子节点都是一组节点。因为如果其中一个 vnode 的子节点不是数组的话，Diff 的意义就不大了。
算法的整体流程 Diff 算法的主要目标是通过新旧两组节点的对比，找到可以复用的节点，然后移动节点到新的位置。所以，算法整体的流程总结一下就是：
找到可以复用的元素（即分别在新旧 children 中 key 相同的两个元素）； 对这两个节点进行 patch 操作； 移动元素到合适的位置； 处理新增或者不存在的元素； 找到可复用的元素 通过参考代码可以看到，算法的主要逻辑就是循环里嵌套循环：遍历新的子节点数组 newChildren，对于里面的每一个子节点 newVNode，都尝试在 oldChildren 中找到一个 oldVNode，使得 newVNode.key === oldVNode.key 即元素可复用。然后做一下更新，即 patch() 。
主体代码如下：
// 遍历新的 children for (let i = 0; i &amp;lt; newChildren.length; i++) { const newVNode = newChildren[i] let j = 0 // 遍历旧的 children for (j; j &amp;lt; oldChildren.length; j++) { const oldVNode = oldChildren[j] // 如果找到了具有相同 key 值的两个节点，则调用 `patch` 函数更新之 if (newVNode.</description>
    </item>
  </channel>
</rss>
