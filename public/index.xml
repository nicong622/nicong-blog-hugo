<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicong&#39;s blog</title>
    <link>/</link>
    <description>Recent content on Nicong&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 10 Sep 2021 18:25:55 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Webify &#43; Hugo 搭建个人博客</title>
      <link>/posts/webify_hugo/</link>
      <pubDate>Fri, 10 Sep 2021 18:25:55 +0800</pubDate>
      
      <guid>/posts/webify_hugo/</guid>
      <description>一些废话 以前试过用不同方案搞过自己的博客，最开始是直接用 GitHub Pages。后来趁着活动买过腾讯云的服务器，然后分别用 Hexo 和 Gatsby 在上面搭建过博客。一开始只是为了想了解一下如何搭建一个个人网站，同时有个看起来比较有个性的地方来放自己的笔记或技术文章（虽然一年也写不了几篇）。并且一开始学前端开发的时候总觉得个人网站是一个前端开发者的标配。
后来也是因为各种原因（主要是懒）没有坚持更新，甚至买来的服务器一年也没登录过几次，一直到过期了就没再续费。所以虽然已经工作了几年，bug 写了不少，但博客文章却没写过几篇。
前段时间在朋友圈看到有人转发有关腾讯云开发 Webify 的介绍文章，感觉使用起来还挺方便的，而且是免费，那就去搞个博客吧，反正以前的访问不了了，万一以后找工作面试官问起的时候，你说没有博客那就尴尬了。
技术方案 应用托管的话就是用 Webify，还差一个博客系统。现在常用的应该就几个：Hexo、Gatsby、Hugo、Vuepress。
 Hexo 几年前用过，感觉还不错，但是不知道现在还有没有再维护； Gatsby 稍微用过一下，感觉功能还是挺全面的，用来做这种小型的个人博客可以说是卓卓有余，甚至有点大材小用了； Vuepress 我没用过，貌似相对小众一点，而且能用的主题貌似也不多； Hugo 貌似已经发布有一段时间了，也是没有用过，不过之前在 v2ex 看到有人推荐。大概看了一下上手还挺简单，而且找到了自己一个喜欢的免费主题（这是重点）。那就决定是你了，Hugo！  于是，大致的技术方案就是 Webify 负责应用托管，Hugo 负责生成静态文件。OK，开搞。
网站搭建 大致浏览一下 Webify 的文档 ，发现需要我们的静态文件不能直接部署到 Webify，而是要先把静态文件推送到自己的代码托管平台，然后 Webify 去你的代码托管平台拉取文件，并部署到 CDN。
大概原来就是在 Webify 上新建项目的时候需要你授权去关联代码托管平台上的某个项目（或者新建一个项目），然后在这个项目里添加一个 webhook，当在特定分支（默认是 master）触发了特定事件（默认是 push），Webify 就会去拉取项目的最新文件并且部署。
Webify 和 Hugo 的 quickstart 文档都有，没什么好说的。</description>
    </item>
    
    <item>
      <title>nuxt-link预加载的原理</title>
      <link>/posts/how-do-nuxt-link-preload/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/how-do-nuxt-link-preload/</guid>
      <description>nuxt-link 是 nuxtjs 提供的一个组件，基于 vue-router 的 router-link 做了一层封装，实现了预加载的功能。本文来简单聊聊这个“预加载”的原理。
一点准备工作 如果直接打开 nuxt 项目中 nuxt-link的源码，会发现里面使用了很多类似于 &amp;lt;%...%&amp;gt; 这样的模板语法。这其实是 lodash.template 提供的模板语法。如果觉得影响阅读，可以按照 nuxt 的文档，新建一个 nuxt 应用，然后构建一次，再找到 .nuxt/components/nuxt-link.client.js，这个就是编译过后的 nuxt-link 代码。
前置条件 要想触发 nuxt-link 的预加载，需要同时满足以下几个条件：
  nuxt-link 的 prefetch 属性值是 true 。
默认值是 nuxt 配置里的 router.prefetchLinks。prefetchLinks 的默认值是 true ，所以 prefetch 的默认值也是 true。
  nuxt-link 的 noPrefetch 属性值是 false。默认值是 false。
  当 nuxt-link 组件出现在可见区域内。
  nuxt-link 的 to 属性指向的页面是同一个应用的页面。
  有网络链接并且不是 2g 网络。</description>
    </item>
    
    <item>
      <title>Textarea 自适应高度</title>
      <link>/posts/autosize_textarea_height/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/autosize_textarea_height/</guid>
      <description>如何使 textarea 元素的高度可以根据内容自动伸缩？
只需两行代码：
// 当输入的时候 textarea.style.height = &amp;#39;auto&amp;#39;; textarea.style.height = textarea.scrollHeight + &amp;#39;px&amp;#39;; 第一行的作用是在删除输入的内容时候让 textarea 的高度能自动缩回去；
在 Vue 中使用：https://codepen.io/Nicong622/pen/LYZYNqb</description>
    </item>
    
    <item>
      <title>Vue Devtool Panel not Showing</title>
      <link>/posts/vue_devtool_panel_not_showing/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/vue_devtool_panel_not_showing/</guid>
      <description>Chrome 的 vue devtool 插件已经检测到当前页面使用了 Vue ，但是 Chrome 开发者工具里没有出现 Vue devtool panel，要怎么处理？
第一步 首先检查一下项目里是否手动设置了 Vue.config.devtools 。把这个配置设为 true 的时候就能看到 Vue devtool panel 。这个配置需要在创建 Vue 实例之前。根据 Vue官方文档 的说法，Vue.config.devtools 在开发时候默认是 true 。
设置完之后重新构建一次，然后重新打开 Chrome devtool 或者修改 Chrome devtool 的主题，就能看到 Vue devtool。
多数情况下这一步就能解决问题。
第二步 如果上一步还是不能解决问题，再试试在创建了 Vue 实例之后执行 window.__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue = app.constructor; 其中 app 是 Vue 的实例。
或者直接在 Chrome devtool 里执行 window.__VUE_DEVTOOLS_GLOBAL_HOOK__.Vue = Vue;。
参考 https://github.com/vuejs/vue-devtools/issues/620#issuecomment-368948291</description>
    </item>
    
    <item>
      <title>如何让 VScode 识别到你的 alias</title>
      <link>/posts/letting_vscode_konw_your_alias/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/letting_vscode_konw_your_alias/</guid>
      <description>假设有这样一个 alias：
alias: { &amp;#39;@&amp;#39;: &amp;#39;./src&amp;#39; } tsconfig.json tsconfig.json 或者 jsconfig.json 中加入以下配置：
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;baseUrl&amp;#34;: &amp;#34;.&amp;#34;, &amp;#34;paths&amp;#34;: { &amp;#34;@/*&amp;#34;: [&amp;#34;./src/*&amp;#34;] } } } 这时候 vscode 就能识别到你的 alias ，也就是可以在输入路径的时候出现提示
eslint 如果你有用 eslint ，即使 vscode 已经识别出来你的 alias，但 eslint 依然有可能会报 “找不到模块” 的错误。这时候可以使用这个模块 eslint-import-resolver-webpack 。就可以去掉 eslint 的报错</description>
    </item>
    
  </channel>
</rss>
